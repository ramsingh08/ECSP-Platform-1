FUNCTION "FC_Secure_Dim_Dest_x" : VOID
TITLE =%version: 0.02 % CN: 33
//Function:
//Retreive data for instance DB and check the destination with the security and 
//dimension.
//
//This version  %created_by: nlhdl %
//              %date_created: maandag 6 juli 2015 10:33:55 %
//              %release: VI_CONV/RA_Dev_Oakham %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.02
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.02
//Initial Revision based on version 0.02 secure & dim   nlHdL    02-04-13   0.01
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_Item_Secure : BOOL ;	//When TRUE item is secure
  i_Item_Class_ST : BOOL ;	//When TRUE item is Class ST (Standard)
  i_ANY_Decision_mess : ANY ;	//ANY pointer to the Decision messages
  i_Unsecure_Not_Allowed : INT ;	//SETT: [Dir] Unsecure Direction which is not allowed
  i_Dimension_SC_Not_Allow : INT ;	//SETT: Direction where SC bags are not allowed. Direction 1 or 2 or 'don't care'
  i_DB_Event_Num : INT ;	//Number of DB event
  i_Rep_Route : INT ;	//Replay Route message for tracking report
END_VAR
VAR_TEMP
  t_Destination : INT ;	//Destination
  t_Preference_A : BYTE ;	//Preference for Direction A
  t_Preference_B : BYTE ;	//Preference for Direction B
  t_DecisionLvl : BYTE ;	//Decision Level	
  t_FailedReason_A : BYTE ;	//Failed Reason for Direction A	
  t_FailedReason_B : BYTE ;	//Failed Reason for Direction B
  t_DINO : INT ;	//DB number of instance	
  t_DecisionLvl_int : INT ;	//Decision level int value
END_VAR
BEGIN
NETWORK
TITLE =AA: Retreive data of destination x from FB

      L     P##i_ANY_Decision_mess; 
      LAR1  ; 

      L     W [AR1,P#8.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     DIW [AR2,P#0.0]; 
      T     #t_Destination; 

      L     DIB [AR2,P#2.0]; 
      T     #t_Preference_A; 

      L     DIB [AR2,P#3.0]; 
      T     #t_Preference_B; 

      L     DIB [AR2,P#4.0]; 
      T     #t_DecisionLvl; 

      L     DIB [AR2,P#5.0]; 
      T     #t_FailedReason_A; 

      L     DIB [AR2,P#6.0]; 
      T     #t_FailedReason_B; 

      L     DINO; 
      T     #t_DINO; 
NETWORK
TITLE =BA: Check the security for the direction

      L     0; 
      L     #i_Unsecure_Not_Allowed; 
      ==I   ; 
      JC    BA99; 
//End network if no direction is set

//If item is secure end block (no check)
      A     #i_Item_Secure; 
      JC    BA99; 

      L     0; 
      L     #t_Preference_A; 
      ==I   ; 
      A(    ; 
      L     0; 
      L     #t_Preference_B; 
      ==I   ; 
      )     ; 
      JC    BA99; 
//End network if there is no preference (Dir = 0)

      L     #i_Unsecure_Not_Allowed; 
      L     1; 
      ==I   ; 
      JCN   BA01; 

//Check direction A if unsecure not allowed = 1
      L     #t_Preference_A; 
      L     0; 
      >I    ; 
      JCN   BA01; 

//If no valid direction Failed Reason = 4 ("Not Allowed Security")
      L     4; 
      T     #t_FailedReason_A; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 4,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

BA01: L     #i_Unsecure_Not_Allowed; 
      L     2; 
      ==I   ; 
      JCN   BA99; 

//Check direction B if unsecure not allowed = 2
      L     #t_Preference_B; 
      L     0; 
      >I    ; 
      JCN   BA99; 

//If no valid direction Failed Reason = 4 ("Not Allowed Security")
      L     4; 
      T     #t_FailedReason_B; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 4,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

BA99: NOP   0; 
NETWORK
TITLE =CA: Check the dimensions for the direction

      L     0; 
      L     #i_Dimension_SC_Not_Allow; 
      ==I   ; 
      JC    CA99; 
//End network if no direction is set

//If item is class Standard Transportable end block (no check)
      A     #i_Item_Class_ST; 
      JC    CA99; 

      L     0; 
      L     #t_Preference_A; 
      ==I   ; 
      A(    ; 
      L     0; 
      L     #t_Preference_B; 
      ==I   ; 
      )     ; 
      JC    CA99; 
//End network if there is no preference (Pref = 0)


      L     #i_Dimension_SC_Not_Allow; 
      L     1; 
      ==I   ; 
      JCN   CA01; 

//Check direction A if dimension not allowed = 1
      L     #t_Preference_A; 
      L     0; 
      >I    ; 
      JCN   CA01; 

//If no valid direction Failed Reason = 5 ("Not Allowed Dimensions")
      L     5; 
      T     #t_FailedReason_A; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 5,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

CA01: L     #i_Dimension_SC_Not_Allow; 
      L     2; 
      ==I   ; 
      JCN   CA99; 

//Check direction B if dimension not allowed = 2
      L     #t_Preference_B; 
      L     0; 
      >I    ; 
      JCN   CA99; 

//If no valid direction Failed Reason = 5 ("Not Allowed Dimensions")
      L     5; 
      T     #t_FailedReason_B; 

      L     #t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 5,
           i_Failed_Destination     := #t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

CA99: NOP   0; 
NETWORK
TITLE =DA: Write data of destination x to FB

      L     P##i_ANY_Decision_mess; 
      LAR1  ; 

      OPN   DI [#t_DINO]; 
      L     W [AR1,P#8.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     #t_Destination; 
      T     DIW [AR2,P#0.0]; 

      L     #t_Preference_A; 
      T     DIB [AR2,P#2.0]; 
      L     #t_Preference_B; 
      T     DIB [AR2,P#3.0]; 
      L     #t_DecisionLvl; 
      T     DIB [AR2,P#4.0]; 
      L     #t_FailedReason_A; 
      T     DIB [AR2,P#5.0]; 
      L     #t_FailedReason_B; 
      T     DIB [AR2,P#6.0]; 
END_FUNCTION

