FUNCTION "FC_Screening_Status" : VOID
TITLE =%version: 0.08 % CN: 40 
//Function:
//This block check the screening status of the baggage.
//Two informations for each screening level
//
//Example screening level 1 secure
//A  Reached_Screen_Level_L1
//AN Failed_Screen_Level_L1
//
//In words, the baggage were screened level 1 and the result was not failed 
//(secure)
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 6 juli 2015 10:38:23 %
//              %release: VI_CONV/RA_Dev_Oakham %
//
//Modification History:                                 By:      Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.08
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    09-01-15   0.08
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.03
//15799: Block consistency update IO symbols, comment   nlHdL    23-09-13   0.02
//Initial Version based on version 0.05 ECS-P GEN       nlLvdG   31-05-13   0.01
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_LNK : INT ;	//LNK number
  i_DB_Event_Num : INT ;	//Number of DB event
  i_Screening_Level : INT ;	//No screening (=0) Level 1/2 (=1), Level 3/4 (=2), Custom (=3)
  i_Direction : INT ;	//Direction to be checked
  i_Direction_Secure : INT ;	//SETT: [Dir] Direction where a Secure baggage must be sorted too
  i_Direction_Unsecure : INT ;	//SETT: [Dir] Direction where a Unsecure baggage must be sorted too
  i_Mode_Semi_Auto : BOOL ;	
END_VAR
VAR_OUTPUT
  o_Direction_Screening : INT ;	//Direction updated
  o_Item_Secure : BOOL ;	//When TRUE item is secure
END_VAR
VAR_TEMP
  t_LIC_Record : "UDT_LIC_Record";	
  t_LIC : INT ;	//LIC number of the LNK
END_VAR
BEGIN
NETWORK
TITLE =AA Check the screening level

      NOP   0; 
// No screening result taked in account for this component
      L     #i_Screening_Level; 
      L     0; 
      ==I   ; 
      JCN   AA99; 

      A     #i_Mode_Semi_Auto; 
      JC    AA01; 

      L     #i_Direction; 
      T     #o_Direction_Screening; 
      BEC   ; 

AA01: L     0; 
      T     #o_Direction_Screening; 
      BEC   ; 

AA99: NOP   0; 
NETWORK
TITLE =..: Determine the LIC number from the LNK

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #i_LNK,
           i_P_INT_Record           := "DB_UDT_LNK_Record".LIC,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_INT                    := #t_LIC);

NETWORK
TITLE =BA: Evaluation Level 1/2

      L     #i_Screening_Level; 
      L     1; 
      ==I   ; 
      JCN   BA99; 

// level 1 
      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Reached_Screen_Level_1,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_1);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Failed_Screen_Level_1,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_1);

// Level 2
      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Reached_Screen_Level_2,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_2);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Failed_Screen_Level_2,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_2);


// Evaluation status baggage
      A     #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_1; 
      AN    #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_1; 
      O(    ; 
      A     #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_2; 
      AN    #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_2; 
      )     ; 
      =     #o_Item_Secure; 

BA99: NOP   0; 
NETWORK
TITLE =CA: Evaluation Level 3/4

      L     #i_Screening_Level; 
      L     2; 
      ==I   ; 
      JCN   CA99; 

// Level 3
      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Reached_Screen_Level_3,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_3);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Failed_Screen_Level_3,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_3);

// Level 4
      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Reached_Screen_Level_4,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_4);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_1.Failed_Screen_Level_4,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_4);

// Evaluation status baggage
      A     #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_3; 
      AN    #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_3; 
      O(    ; 
      A     #t_LIC_Record.BIR.Process_1.Reached_Screen_Level_4; 
      AN    #t_LIC_Record.BIR.Process_1.Failed_Screen_Level_4; 
      )     ; 
      =     #o_Item_Secure; 
CA99: NOP   0; 

NETWORK
TITLE =DA: Evaluation Custom (Process

      L     #i_Screening_Level; 
      L     3; 
      ==I   ; 
      JCN   DA99; 

// Level custom
      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_2.Reached_Screen_Level_1,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_2.Reached_Screen_Level_1);

      CALL "FC_Read_Bool_Record" (
           i_Record_Number          := #t_LIC,
           i_P_BOOL_Record          := "DB_UDT_LIC_Record".BIR.Process_2.Failed_Screen_Level_1,
           i_DB                     := "DB_LIC_List",
           i_DB_Event_Num           := #i_DB_Event_Num,
           o_BOOL                   := #t_LIC_Record.BIR.Process_2.Failed_Screen_Level_1);


// Evaluation status baggage
      A     #t_LIC_Record.BIR.Process_2.Reached_Screen_Level_1; 
      AN    #t_LIC_Record.BIR.Process_2.Failed_Screen_Level_1; 
      =     #o_Item_Secure; 
DA99: NOP   0; 

NETWORK
TITLE =FA: Check direction secure

      NOP   0; 
// The baggage is secure
      A     #o_Item_Secure; 
      JCN   GA01; 


      L     #i_Direction_Secure; // IF secure direction is not existing, end of the function
      L     0; 
      ==I   ; 
      JC    GA01; 

      A     #i_Mode_Semi_Auto; // IF mode is semi auto and item secure then direction is accepted
      JC    FA02; 

      L     #i_Direction; // IF secure direction is good, end of the function
      L     #i_Direction_Secure; 
      ==I   ; 
      BEC   ; 

      L     #i_Direction_Secure; // THEN check if 1 is the secure direction
      L     1; 
      ==I   ; 
      JC    FA01; 
      L     2; // ELSE check if 2 is the secure direction
      T     #o_Direction_Screening; 
      BE    ; 
FA01: L     1; 
      T     #o_Direction_Screening; 
      BE    ; 

FA02: L     0; 
      T     #o_Direction_Screening; 
      BE    ; 
NETWORK
TITLE =GA: Check direction unsecure

GA01: L     #i_Direction_Unsecure; // IF unsecure direction is not existing, end of the function
      L     0; 
      ==I   ; 
      JC    GA99; 

      L     #i_Direction; 
      L     #i_Direction_Unsecure; 
      ==I   ; 
      BEC   ; 

      L     #i_Direction_Unsecure; // THEN check if 1 is the unsecure direction
      L     1; 
      ==I   ; 
      JC    GA02; 
      L     2; 
      T     #o_Direction_Screening; // ELSE check if 2 is the unsecure direction
      BE    ; 
GA02: L     1; 
      T     #o_Direction_Screening; 
      BE    ; 

GA99: L     #i_Direction; 
      T     #o_Direction_Screening; 
END_FUNCTION

