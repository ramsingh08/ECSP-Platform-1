FUNCTION "FC_Induct_Sync" : VOID
TITLE =%version: 1.02 % CN: 40
//Function:
//Syncronise PLT info at merge transition.
//The info 1 and 2 will detected at the last induct conveyor and will be 
//placed on the positions of the -1 and -2 in the merge section PLT DB.
//The Data will be used to identify the -1 and -2 on the merge section.
//
//Description:
//This function block is able to detect a leading and trailing edge of 
//a item at handover to the merge section and to replace the -1 and -2
//in the merge section PLT for a 1 and a 2.
//
//
//                         \       \ 
//                          \  ____ \2
//                           \ \   \ \ 
//                            \ \   \ \ 
//         ____________________\_\___\_\1_____________                            
//       
//              
//                 ===flow-direction===>                                          
//          
//         ___________________________________________                            
//     
//       
//         | | | | | | | |-2| | | |-1| | | | | | | | |   
//                                               
//                                                                
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 6 juli 2015 10:38:19 %
//              %release: VI_CONV/RA_Dev_Oakham %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   1.02
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   1.02
//14261: Removed not used pointer code                  nlHdL    18-06-13   1.01
//13971: Modified PLT concept with state Version1       nlHdL    29-05-13   1.00
// Init version based on version 0.09 of PLT version 0
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_DB_Event_Num : INT ;	//Number of DB event
  i_DB_PLT_Merge_Num : INT ;	//Number of DB PLT Merge
  i_DB_PLT_Junction_Num : INT ;	//Number of DB PLT Junction
END_VAR
VAR_TEMP
  t_DB_PLT_Number_Merge : INT ;	
  t_DB_PLT_Number_Junction : INT ;	
  t_Junction_Length : INT ;	
  t_Merge_Length : INT ;	
  t_Info_Junction : INT ;	
  t_Data_Junction : INT ;	
  t_Search_Position : INT ;	
  t_Position_Found : INT ;	
  t_Info_Found : INT ;	
  t_Data_Found : INT ;	
  t_DB_Nr_Found : INT ;	
  t_Number_Items_Found : INT ;	
  t_Not_Used_INT : INT ;	
  t_Item_At_Handover_Pos : BOOL ;	
  t_Section_run_Merge : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =AA: Read shared DB PLT info

      L     #i_DB_PLT_Junction_Num; 
      T     #t_DB_PLT_Number_Junction; 
      OPN   DB [#t_DB_PLT_Number_Junction]; 

      L     DBW   12; 
      T     #t_Junction_Length; 

      A     DBX   10.6; // Read item at handover from PLT DB
      =     #t_Item_At_Handover_Pos; 

      L     #i_DB_PLT_Merge_Num; 
      T     #t_DB_PLT_Number_Merge; 
      OPN   DB [#t_DB_PLT_Number_Merge]; 

      A     DBX   10.1; 
      =     #t_Section_run_Merge; 

      L     DBW   12; 
      T     #t_Merge_Length; 
NETWORK
TITLE =BA: Search and replace of leading edge
//When a item is in handover at the junction conveyor, The PLT DB of the 
//merge conveyor will be searched for the correspondig negative leading edge. To 
//check if the correct negative leading edge is found the data will be compared 
//with the data of the leading edge of the junction conveyor. When the correct 
//negative leading edge has found the neagtive leading edge will be re-writed to 
//a positive leading edge. The corresponding negative trailing edge will be 
//searched from the leading position upstreamwards. When this is found the 
//trailing edge will be re-writed.
      A     #t_Item_At_Handover_Pos; // When item is in handover on junction
      A     #t_Section_run_Merge; 
      JCN   BA99; 

      L     #t_Merge_Length; 
      L     300; 
      +I    ; 
      T     #t_Search_Position; 

      CALL "FC_PLT_Srch_Inf_Up" (// Search for leading edge on junction for data
           i_DB_PLT_Num             := #i_DB_PLT_Junction_Num,
           i_Position               := 0,
           i_Window                 := #t_Junction_Length,
           i_Info                   := 1,
           o_Position               := #t_Position_Found,
           o_Info                   := #t_Info_Junction,
           o_LNK                    := #t_Data_Junction,
           o_DB_PLT_Num             := #t_Not_Used_INT,
           o_Number_Items_Found     := #t_Not_Used_INT);


//Open merge PLT DB check for same LNK on merge as junction.
//Also check if info_state is Claimed W#16#0400 then remove the claimed state.
      OPN   DB [#t_DB_PLT_Number_Merge]; 

      L     DBW    0; 
      L     0; 
      >I    ; 
      JCN   BA99; // IF no entries used goto to end

//Create pointer to the last used entry
      L     DBW    0; 
      L     1; 
      -I    ; 
      L     8; // Number of entries -1 * Length
      *I    ; 
      L     14; // Add header P#14.0
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Pointer to last used entry in PLT DB  

BA01: L     DBW [AR1,P#6.0]; // Actual link
      L     #t_Data_Junction; 
      ==I   ; 
      JCN   BA02; 

      L     DBW [AR1,P#2.0]; // Actual info state
      L     W#16#400; 
      ==I   ; 
      JCN   BA02; 

      L     0; 
      T     DBW [AR1,P#2.0]; // Actual info state

BA02: TAR1  ; // Read Entry pointer of address-register
      L     P#14.0; // 14 bytes, because the header of a PLT DB is 14 bytes long.
      -D    ; // Entry pointer = Entry pointer - P#6.0
      JMZ   BA99; // IF Entry pointer > 0

      L     P#6.0; // THEN Entry pointer = -14 + 8 = -6
      +D    ; 
      LAR1  ; // Store Entry pointer in address-register 

      JU    BA01; // GOTO START OF SEARCH-LOOP


BA99: NOP   0; 
NETWORK
TITLE =CA: Delete entries from junction PLT
//Check if entries are at end of junction, Then delete the last entry.
//Only check when merge section is running (Ready to Receive the item).
//
      A     #t_Section_run_Merge; 
      JCN   CA99; 

      OPN   DB [#t_DB_PLT_Number_Junction]; 

      L     DBW    0; 
      L     0; 
      >I    ; 
      JCN   CA99; // IF no entries used goto to end

//Create pointer to the last used entry
      L     DBW    0; 
      L     1; 
      -I    ; 
      L     8; // Number of entries -1 * Length
      *I    ; 
      L     14; // Add header P#14.0
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      LAR1  ; // Pointer to last used entry in PLT DB  

      L     DBW [AR1,P#0.0]; // Actual entry position 
      L     1; 
      <=I   ; 
      JCN   CA99; // IF position > 0 then delete the entry

//Remove entry
      L     0; 
      T     DBD [AR1,P#0.0]; // Clear last entry  
      T     DBD [AR1,P#4.0]; 

      L     DBW    0; 
      L     1; 
      -I    ; 
      T     DBW    0; // decrease entry counter

CA99: NOP   0; 
END_FUNCTION

