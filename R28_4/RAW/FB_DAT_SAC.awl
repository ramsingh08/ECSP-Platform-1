FUNCTION_BLOCK "FB_DAT_SAC"
TITLE =%version: 0.12 %  CN: 40
//Function:
//This block reads the Event DB and handles the messages to SAC.
//
//Description:
//This FB reads the DB_Event. All events which are messages to SAC are read and 
//the messages are prepared and placed in the Send_FIFO.
//When a message is handled, it is indicated in the DB by setting the "Handled by 
//SAC" bit.
//
//History:
//This version  %created_by: nlhdl %
//              %date_created: maandag 6 juli 2015 10:35:29 %
//              %release: VI_CONV/RA_Dev_Oakham %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.12
//22337: Remove the vibes1.x with the vibes 3.x         nlHdL    08-01-15   0.12
//21252: FB_DAT_SAC added EBS Lane Status report        nlHdL    14-10-14   0.05
//20002: Moved label BA17 up to load AR1                nltny    27-08-14   0.04
//19518: Block call update of FC_xxx_Record             nltny    07-08-14   0.03
//18385: Updated deregister package to use event 1206   nlHHop   01-04-14   0.02
//18060: Update messages ID's for Vibes 3.2             nlHdL    01-04-14   0.01
//Initial Revision based on 0.09 of General             nlHdL    17-02-14   0.01
//
FAMILY : VIBES
VERSION : 0.0


VAR_INPUT
  i_ID : DWORD ;	//ID Record HEX AAAA - ZZSS/OO.
  i_Local_Buffer : BLOCK_DB ;	//Data Structure: Local Buffer DB
  i_Degraded_Mode : BOOL ;	//CMD: The system is running in degraded mode
  i_PLC_FIFO_DB : BLOCK_DB ;	//Data structure: PLC FIFO DB
END_VAR
VAR
  s_Entries_Used : INT ;	//Number ot the entries used in the Local Event DB
  s_Next_Message_to_Read : INT  := 1;	//Next Event wich is going to be read
  s_Adres_Next_Message : INT ;	//Calculated addres of next record
  s_Message_Value : INT ;	//Value in the current event
  s_PLC_FIFO_DB_Num : INT ;	//Number of the PLC FIFO DB for messages
END_VAR
VAR_TEMP
  t_Event_DB_Num : INT ;	//Number of the Local Event DB
  t_ECS_Num : INT ;	//Number ECS record
  t_ID : DINT ;	//ID from ECS record
  t_AR1_Backup : DINT ;	//Save the contents of AR1
  t_Zone_Nr : INT ;	//Zone number taken out from ID
END_VAR
BEGIN
NETWORK
TITLE =AA: Read local PLC DB number and HLC DB

      OPN   #i_PLC_FIFO_DB; // Load DB PLC FIFO to get DB number
      L     DBNO; 
      T     #s_PLC_FIFO_DB_Num; 


      OPN   #i_Local_Buffer; // Opn local HLC buffer DB
      L     DBNO; 
      T     #t_Event_DB_Num; 

      L     DBW    0; // Load number of entries used in Local HLC DB
      T     #s_Entries_Used; // Transfer to temporery
NETWORK
TITLE =BA: Write message to output DB

      L     1; // Start with the first record
      T     #s_Next_Message_to_Read; 

      L     #s_Entries_Used; // Check if there are messages to send
      L     0; 
      <>I   ; 
      JCN   BA99; 

BA01: L     #s_Next_Message_to_Read; // Load next record number
      L     1; // Take begin of record
      -I    ; 
      L     6; // Multiply by record length
      *I    ; 
      L     4; // Add header length
      +I    ; 
      SLW   3; // Shift bytes to make pointer to last entry
      T     #s_Adres_Next_Message; 
      LAR1  ; // Load to static and AR1

      L     DBW [AR1,P#0.0]; // Load Value of the message 
      T     #s_Message_Value; 


      L     DBW [AR1,P#2.0]; 
      L     1201; 
      ==I   ; 
      JCN   BA02; 

      CALL "FC_Crt_TrackingRep" (// Message type TrackingReport
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA02: L     DBW [AR1,P#2.0]; 
      L     1202; 
      ==I   ; 
      JCN   BA03; 

      CALL "FC_Crt_TransportDir" (
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Nr            := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA03: L     DBW [AR1,P#2.0]; 
      L     1203; 
      ==I   ; 
      JCN   BA04; 

      CALL "FC_Crt_IdChangeRep" (// Message type IdChangeReport
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA04: L     DBW [AR1,P#2.0]; 
      L     1204; 
      ==I   ; 
      JCN   BA05; 

      CALL "FC_Crt_CapacityRep" (
           i_ID                     := #i_ID,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Nr            := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA05: L     DBW [AR1,P#2.0]; 
      L     1205; 
      ==I   ; 
      JCN   BA06; 

      CALL "FC_Crt_Register" (// Message type RegisterPackage
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA06: L     DBW [AR1,P#2.0]; 
      L     1206; 
      ==I   ; 
      JCN   BA08; 

      CALL "FC_Crt_Deregister" (// Message type DeregisterPackage
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA08: L     DBW [AR1,P#2.0]; 
      L     1208; 
      ==I   ; 
      JCN   BA09; 

      CALL "FC_Crt_Availability" (// Message type AvailabilityReport
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA09: L     DBW [AR1,P#2.0]; 
      L     1209; 
      ==I   ; 
      JCN   BA10; 

      CALL "FC_Crt_PackScanned" (// Message type PackageReport - ATR Result 
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA10: L     DBW [AR1,P#2.0]; 
      L     1210; 
      ==I   ; 
      JCN   BA11; 

      CALL "FC_Crt_PackScreened" (// Message type PackageReport - Screening result
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA11: L     DBW [AR1,P#2.0]; 
      L     1211; 
      ==I   ; 
      JCN   BA16; 

      CALL "FC_Crt_PackArrived" (// Message type PackageReport - Arrived
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA16: L     DBW [AR1,P#2.0]; 
      L     1216; 
      ==I   ; 
      JCN   BA41; 

      TAR1  ; 
      T     #t_AR1_Backup; 

      CALL "FC_Read_Int_Record" (
           i_Record_Number          := #s_Message_Value,
           i_P_INT_Record           := "DB_UDT_LNK_Record".ECS,
           i_DB                     := "DB_LNK_List",
           i_DB_Event_Num           := #t_Event_DB_Num,
           o_INT                    := #t_ECS_Num);

      L     #t_ECS_Num; 
      L     0; 
      >I    ; 
      JCN   BA17; 

      CALL "FC_Read_Dint_Record" (
           i_Record_Number          := #t_ECS_Num,
           i_P_DINT_Record          := "DB_UDT_ECS_Record".CIR.Last_Location,
           i_DB                     := "DB_ECS_List",
           i_DB_Event_Num           := #t_Event_DB_Num,
           o_DINT                   := #t_ID);

      L     #t_ID; 
      T     #i_ID; 

BA17: L     #t_AR1_Backup; 
      LAR1  ; 

      CALL "FC_Crt_Deregister" (// Message type DeregisterPackage Clean UP (Missing)
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA41: L     DBW [AR1,P#2.0]; 
      L     1401; 
      ==I   ; 
      JCN   BA42; 

      CALL "FC_Crt_SegmentStatus" (// Message type SegmentStatusReport
           i_ID                     := #i_ID,
           i_SegmentID              := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA42: L     DBW [AR1,P#2.0]; 
      L     1404; 
      ==I   ; 
      JCN   BA50; 

      L     #i_ID; // Load ID
      L     DW#16#FF00; // Filter Zone number only
      AD    ; 
      SRD   8; // Slide Zone nubmer to beginning 0000ZZ00 -> 0000ZZ
      BTI   ; // Convert HEX to INT
      T     #t_Zone_Nr; // Transfer to outgoing messages

      CALL "FC_Crt_EBSLaneStatus" (
           i_ID                     := #i_ID,
           i_SegmentID              := #t_Zone_Nr,
           i_Status                 := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA50: L     DBW [AR1,P#2.0]; 
      L     1500; 
      ==I   ; 
      JCN   BA51; 

      CALL "FC_Crt_DeregisterTub" (// Message type DeregisterPackage Missing
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num,
           i_Reason                 := 2);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA51: L     DBW [AR1,P#2.0]; 
      L     1501; 
      ==I   ; 
      JCN   BA90; 

      CALL "FC_Crt_RegisterTub" (// Message type RegisterPackage
           i_ID                     := #i_ID,
           i_Data                   := #s_Message_Value,
           i_FIFO_PLC_DB_num        := #s_PLC_FIFO_DB_Num,
           i_DB_Event_Num           := #t_Event_DB_Num);

      SET   ; 
      =     DBX [AR1,P#4.0]; // Set "Handled by SAC" bit

      JU    BA90; 

BA90: NOP   0; 

      L     #s_Adres_Next_Message; // Load adress current message
      LAR1  ; // Transfer to AR 1

      L     #s_Next_Message_to_Read; // Increase next message with 1
      L     1; 
      +I    ; 
      T     #s_Next_Message_to_Read; // If next record to read is equal or smaller
      L     #s_Entries_Used; // then number of messages in DB, than do next message
      >I    ; 
      JCN   BA01; 

BA99: NOP   0; 
END_FUNCTION_BLOCK

