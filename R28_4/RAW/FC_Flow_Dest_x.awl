FUNCTION "FC_Flow_Dest_x" : VOID
TITLE =%version: 0.05 % CN: 33
//Function:
//Retreive direction A and direction B, and check the direction with TEP value's
//Check if max time has elapsed, else change direction
//Check the ratio, if ratio is reached then change direction
//
//This version  %created_by: nlhdl %
//              %date_created: maandag 6 juli 2015 10:33:22 %
//              %release: VI_CONV/RA_Dev_Oakham %
//
//Modification History:                                   By:    Date:     Rev:
//----------------------------------------------------  -------  --------  -----
//7324: ECS-P General from the RD to RA for platform    nlHdL    06-07-15   0.05
//15807: Block consistency update IO symbols, comment   nlHdL    18-09-13   0.05
//PR11918: Adopted Decision point update with Dir A & B nlHdL    02-04-13   0.04
//CR19512 Update sources according S7 Manager           nlHdL    08-03-13   0.03
//PR11727 Add synergy key words 'created_by' and date   nlHdL    14-11-12   0.02
//Initial Revision                                      nlHdL    28-09-11   0.01
//
FAMILY : General
VERSION : 0.0


VAR_INPUT
  i_TEP_Dir_A : INT ;	//Totale Empty Positions direction A
  i_TEP_Dir_B : INT ;	//Totale Empty Positions direction B
  i_Last_Dir : BYTE ;	//Last direction
  i_ANY_Direction_A : ANY ;	//ANY pointer to the Direction A messages
  i_ANY_Direction_B : ANY ;	//ANY pointer to the Direction B messages
  i_Sett_TEP_Dir_A_Flow : INT ;	//SETT: Totale Empty Positions for direction A
  i_Sett_TEP_Dir_B_Flow : INT ;	//SETT: Totale Empty Positions for direction B
  i_Sett_Number_Dir_A : INT ;	//SETT: Number of Items switch to direction A
  i_Sett_Number_Dir_B : INT ;	//SETT: Number of Items switch to direction B
  i_CNT_Load_Balance : INT ;	//Count value number of items Load Balance
  i_Max_Time_Elapsed : BOOL ;	//Maximum time elapsed for flow
  i_DB_Event_Num : INT ;	//Number of DB event
  i_Rep_Route : INT ;	//Replay Route message for tracking report
END_VAR
VAR_OUTPUT
  o_CNT_Load_Balance : INT ;	//Counter load balance
END_VAR
VAR_TEMP
  t_DINO : INT ;	//DB number of instance	
  t_Fail_A : BOOL ;	//Fail TEP value A
  t_Fail_B : BOOL ;	//Fail TEP value B
  t_Dir_A : STRUCT 	
   t_Destination : INT ;	//Destination
   t_Preference_A : BYTE ;	//Preference for Direction A
   t_Preference_B : BYTE ;	//Preference for Direction B
   t_DecisionLvl : BYTE ;	//Decision Level	
   t_FailedReason_A : BYTE ;	//Failed Reason for Direction A	
   t_FailedReason_B : BYTE ;	//Failed Reason for Direction B
  END_STRUCT ;	
  t_Dir_B : STRUCT 	
   t_Destination : INT ;	//Destination
   t_Preference_A : BYTE ;	//Preference for Direction A
   t_Preference_B : BYTE ;	//Preference for Direction B
   t_DecisionLvl : BYTE ;	//Decision Level	
   t_FailedReason_A : BYTE ;	//Failed Reason for Direction A	
   t_FailedReason_B : BYTE ;	//Failed Reason for Direction B
  END_STRUCT ;	
  t_DecisionLvl_int : INT ;	//Decision level int value
END_VAR
BEGIN
NETWORK
TITLE =AA: Retreive data of destination x from FB

      L     P##i_ANY_Direction_A; 
      LAR1  ; 

      L     W [AR1,P#8.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     DIW [AR2,P#0.0]; 
      T     #t_Dir_A.t_Destination; 

      L     DIB [AR2,P#2.0]; 
      T     #t_Dir_A.t_Preference_A; 
      L     DIB [AR2,P#3.0]; 
      T     #t_Dir_A.t_Preference_B; 
      L     DIB [AR2,P#4.0]; 
      T     #t_Dir_A.t_DecisionLvl; 
      L     DIB [AR2,P#5.0]; 
      T     #t_Dir_A.t_FailedReason_A; 
      L     DIB [AR2,P#6.0]; 
      T     #t_Dir_A.t_FailedReason_B; 

      L     DINO; 
      T     #t_DINO; 

      L     P##i_ANY_Direction_B; 
      LAR1  ; 

      L     W [AR1,P#8.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     DIW [AR2,P#0.0]; 
      T     #t_Dir_B.t_Destination; 

      L     DIB [AR2,P#2.0]; 
      T     #t_Dir_B.t_Preference_A; 
      L     DIB [AR2,P#3.0]; 
      T     #t_Dir_B.t_Preference_B; 
      L     DIB [AR2,P#4.0]; 
      T     #t_Dir_B.t_DecisionLvl; 
      L     DIB [AR2,P#5.0]; 
      T     #t_Dir_B.t_FailedReason_A; 
      L     DIB [AR2,P#6.0]; 
      T     #t_Dir_B.t_FailedReason_B; 

NETWORK
TITLE =BA: Check Flow control by TEP value

      SET   ; 
      R     #t_Fail_A; 
      R     #t_Fail_B; 
//Reset temp values

      A(    ; 
      L     #i_Sett_TEP_Dir_A_Flow; 
      L     0; 
      ==I   ; 
      )     ; 
      A(    ; 
      L     #i_Sett_TEP_Dir_B_Flow; 
      L     0; 
      ==I   ; 
      )     ; 
      BEC   ; 
//End block if no TEP settings

      L     #i_Sett_TEP_Dir_A_Flow; 
      L     0; 
      <>I   ; 
      JCN   BA01; 

// Direction A = 1 

      L     #i_TEP_Dir_A; 
      L     #i_Sett_TEP_Dir_A_Flow; 
      <I    ; 
      JCN   BA01; 
// If actuale TEP < min TEP (Sett)

//Failed Reason = 3 ("NOT Allowed FLOW CONTROL")
      L     3; 
      T     #t_Dir_A.t_FailedReason_A; 

      L     #t_Dir_A.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 3,
           i_Failed_Destination     := #t_Dir_A.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      SET   ; 
      S     #t_Fail_A; 

BA01: L     #i_Sett_TEP_Dir_B_Flow; 
      L     0; 
      <>I   ; 
      JCN   BA99; 

      L     #i_TEP_Dir_B; 
      L     #i_Sett_TEP_Dir_B_Flow; 
      <I    ; 
      JCN   BA99; 
// If actuale TEP < min TEP (Sett)

//Failed Reason = 3 ("NOT Allowed FLOW CONTROL")
      L     3; 
      T     #t_Dir_B.t_FailedReason_B; 

      L     #t_Dir_B.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 3,
           i_Failed_Destination     := #t_Dir_B.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      SET   ; 
      S     #t_Fail_B; 
BA99: NOP   0; 
NETWORK
TITLE =CA: Time Out Direction

      A     #t_Fail_A; 
      O     #t_Fail_B; 
      JC    CA99; 
//Check if no Failed present

      A     #i_Max_Time_Elapsed; 
      JCN   CA99; 

      L     #i_Last_Dir; 
      L     1; 
      ==I   ; 
      JCN   CA01; 

//Direction A has preference > 0
      L     #t_Dir_A.t_Preference_A; 
      L     0; 
      >I    ; 
      JCN   CA01; 

//Failed Reason = 9 ("TIME OUT TEPTOP")
      L     9; 
      T     #t_Dir_A.t_FailedReason_A; 

      L     #t_Dir_A.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 9,
           i_Failed_Destination     := #t_Dir_A.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      L     0; 
      T     #i_CNT_Load_Balance; 

      SET   ; 
      S     #t_Fail_A; 

CA01: L     #i_Last_Dir; 
      L     2; 
      ==I   ; 
      JCN   CA99; 

//Direction B has preference > 0
      L     #t_Dir_B.t_Preference_B; 
      L     0; 
      >I    ; 
      JCN   CA99; 

//Failed Reason = 9 ("TIME OUT TEPTOP")
      L     9; 
      T     #t_Dir_B.t_FailedReason_B; 

      L     #t_Dir_B.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 9,
           i_Failed_Destination     := #t_Dir_B.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      L     0; 
      T     #i_CNT_Load_Balance; 

      SET   ; 
      S     #t_Fail_B; 

CA99: NOP   0; 
NETWORK
TITLE =DA: Check ratio for the direction

      L     #i_Sett_Number_Dir_A; 
      L     #i_Sett_Number_Dir_B; 
      +I    ; 
      L     0; 
      <>I   ; 
      JCN   DA99; 
//Skip network if no settings are present

      A     #t_Fail_A; 
      O     #t_Fail_B; 
      JC    DA04; 
//IF TEP fault no load balance, only count bag

      L     1; 
      L     #i_Last_Dir; 
      ==I   ; 
      JCN   DA02; 
//Check if dir = 1 else check dir 2

      L     #i_CNT_Load_Balance; 
      L     #i_Sett_Number_Dir_A; 
      <I    ; 
      JCN   DA01; 

//Direction A is active, Fail Direction B
      L     3; 
      T     #t_Dir_B.t_FailedReason_B; 

      L     #t_Dir_B.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 3,
           i_Failed_Destination     := #t_Dir_B.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      JU    DA04; 

DA01: NOP   0; 
      L     3; 
      T     #t_Dir_A.t_FailedReason_A; 
//Direction A has elapsed
      L     0; 
      T     #i_CNT_Load_Balance; 

      JU    DA04; 

//Check if dir 2
DA02: L     2; 
      L     #i_Last_Dir; 
      ==I   ; 
      JCN   DA04; 

      L     #i_CNT_Load_Balance; 
      L     #i_Sett_Number_Dir_B; 
      <I    ; 
      JCN   DA03; 

//Direction B is active
      L     3; 
      T     #t_Dir_A.t_FailedReason_A; 

      L     #t_Dir_A.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 1,
           i_Failed_Reason          := 3,
           i_Failed_Destination     := #t_Dir_A.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      JU    DA04; 

DA03: NOP   0; 
      L     3; 
      T     #t_Dir_B.t_FailedReason_B; 
//Direction B has elapsed

      L     #t_Dir_B.t_DecisionLvl; 
      T     #t_DecisionLvl_int; 

      CALL "FC_Exec_Failed_Dir" (
           i_Rep_Route              := #i_Rep_Route,
           i_Failed_Direction       := 2,
           i_Failed_Reason          := 3,
           i_Failed_Destination     := #t_Dir_B.t_Destination,
           i_Failed_Decisionlvl     := #t_DecisionLvl_int,
           i_DB_Event_Num           := #i_DB_Event_Num);

      L     0; 
      T     #i_CNT_Load_Balance; 

DA04: L     #i_CNT_Load_Balance; 
      L     1; 
      +I    ; 
      T     #i_CNT_Load_Balance; 
DA99: NOP   0; 
NETWORK
TITLE =EA: Write data of destination x to FB

      L     #i_CNT_Load_Balance; 
      T     #o_CNT_Load_Balance; 

      L     P##i_ANY_Direction_A; 
      LAR1  ; 

      L     W [AR1,P#8.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     #t_Dir_A.t_Destination; 
      T     DIW [AR2,P#0.0]; 

      L     #t_Dir_A.t_Preference_A; 
      T     DIB [AR2,P#2.0]; 
      L     #t_Dir_A.t_Preference_B; 
      T     DIB [AR2,P#3.0]; 
      L     #t_Dir_A.t_DecisionLvl; 
      T     DIB [AR2,P#4.0]; 
      L     #t_Dir_A.t_FailedReason_A; 
      T     DIB [AR2,P#5.0]; 
      L     #t_Dir_A.t_FailedReason_B; 
      T     DIB [AR2,P#6.0]; 

      L     P##i_ANY_Direction_B; 
      LAR1  ; 

      L     W [AR1,P#8.0]; // Byte6=memory area, Byte7..9=Byte,Bit address
      LAR2  ; 

      L     #t_Dir_B.t_Destination; 
      T     DIW [AR2,P#0.0]; 

      L     #t_Dir_B.t_Preference_A; 
      T     DIB [AR2,P#2.0]; 
      L     #t_Dir_B.t_Preference_B; 
      T     DIB [AR2,P#3.0]; 
      L     #t_Dir_B.t_DecisionLvl; 
      T     DIB [AR2,P#4.0]; 
      L     #t_Dir_B.t_FailedReason_A; 
      T     DIB [AR2,P#5.0]; 
      L     #t_Dir_B.t_FailedReason_B; 
      T     DIB [AR2,P#6.0]; 
END_FUNCTION

